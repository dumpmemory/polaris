// Code generated by ent, DO NOT EDIT.

package downloadclients

import (
	"polaris/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldID, id))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldEnable, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldName, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldURL, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldUser, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldPassword, v))
}

// Settings applies equality check predicate on the "settings" field. It's identical to SettingsEQ.
func Settings(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldSettings, v))
}

// Priority1 applies equality check predicate on the "priority1" field. It's identical to Priority1EQ.
func Priority1(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldPriority1, v))
}

// RemoveCompletedDownloads applies equality check predicate on the "remove_completed_downloads" field. It's identical to RemoveCompletedDownloadsEQ.
func RemoveCompletedDownloads(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldRemoveCompletedDownloads, v))
}

// RemoveFailedDownloads applies equality check predicate on the "remove_failed_downloads" field. It's identical to RemoveFailedDownloadsEQ.
func RemoveFailedDownloads(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldRemoveFailedDownloads, v))
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldTags, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldEnable, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContainsFold(FieldName, v))
}

// ImplementationEQ applies the EQ predicate on the "implementation" field.
func ImplementationEQ(v Implementation) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldImplementation, v))
}

// ImplementationNEQ applies the NEQ predicate on the "implementation" field.
func ImplementationNEQ(v Implementation) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldImplementation, v))
}

// ImplementationIn applies the In predicate on the "implementation" field.
func ImplementationIn(vs ...Implementation) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldImplementation, vs...))
}

// ImplementationNotIn applies the NotIn predicate on the "implementation" field.
func ImplementationNotIn(vs ...Implementation) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldImplementation, vs...))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContainsFold(FieldURL, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasSuffix(FieldUser, v))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContainsFold(FieldUser, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContainsFold(FieldPassword, v))
}

// SettingsEQ applies the EQ predicate on the "settings" field.
func SettingsEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldSettings, v))
}

// SettingsNEQ applies the NEQ predicate on the "settings" field.
func SettingsNEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldSettings, v))
}

// SettingsIn applies the In predicate on the "settings" field.
func SettingsIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldSettings, vs...))
}

// SettingsNotIn applies the NotIn predicate on the "settings" field.
func SettingsNotIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldSettings, vs...))
}

// SettingsGT applies the GT predicate on the "settings" field.
func SettingsGT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldSettings, v))
}

// SettingsGTE applies the GTE predicate on the "settings" field.
func SettingsGTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldSettings, v))
}

// SettingsLT applies the LT predicate on the "settings" field.
func SettingsLT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldSettings, v))
}

// SettingsLTE applies the LTE predicate on the "settings" field.
func SettingsLTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldSettings, v))
}

// SettingsContains applies the Contains predicate on the "settings" field.
func SettingsContains(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContains(FieldSettings, v))
}

// SettingsHasPrefix applies the HasPrefix predicate on the "settings" field.
func SettingsHasPrefix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasPrefix(FieldSettings, v))
}

// SettingsHasSuffix applies the HasSuffix predicate on the "settings" field.
func SettingsHasSuffix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasSuffix(FieldSettings, v))
}

// SettingsEqualFold applies the EqualFold predicate on the "settings" field.
func SettingsEqualFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEqualFold(FieldSettings, v))
}

// SettingsContainsFold applies the ContainsFold predicate on the "settings" field.
func SettingsContainsFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContainsFold(FieldSettings, v))
}

// Priority1EQ applies the EQ predicate on the "priority1" field.
func Priority1EQ(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldPriority1, v))
}

// Priority1NEQ applies the NEQ predicate on the "priority1" field.
func Priority1NEQ(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldPriority1, v))
}

// Priority1In applies the In predicate on the "priority1" field.
func Priority1In(vs ...int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldPriority1, vs...))
}

// Priority1NotIn applies the NotIn predicate on the "priority1" field.
func Priority1NotIn(vs ...int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldPriority1, vs...))
}

// Priority1GT applies the GT predicate on the "priority1" field.
func Priority1GT(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldPriority1, v))
}

// Priority1GTE applies the GTE predicate on the "priority1" field.
func Priority1GTE(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldPriority1, v))
}

// Priority1LT applies the LT predicate on the "priority1" field.
func Priority1LT(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldPriority1, v))
}

// Priority1LTE applies the LTE predicate on the "priority1" field.
func Priority1LTE(v int) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldPriority1, v))
}

// RemoveCompletedDownloadsEQ applies the EQ predicate on the "remove_completed_downloads" field.
func RemoveCompletedDownloadsEQ(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldRemoveCompletedDownloads, v))
}

// RemoveCompletedDownloadsNEQ applies the NEQ predicate on the "remove_completed_downloads" field.
func RemoveCompletedDownloadsNEQ(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldRemoveCompletedDownloads, v))
}

// RemoveFailedDownloadsEQ applies the EQ predicate on the "remove_failed_downloads" field.
func RemoveFailedDownloadsEQ(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldRemoveFailedDownloads, v))
}

// RemoveFailedDownloadsNEQ applies the NEQ predicate on the "remove_failed_downloads" field.
func RemoveFailedDownloadsNEQ(v bool) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldRemoveFailedDownloads, v))
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEQ(FieldTags, v))
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNEQ(FieldTags, v))
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldIn(FieldTags, vs...))
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldNotIn(FieldTags, vs...))
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGT(FieldTags, v))
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldGTE(FieldTags, v))
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLT(FieldTags, v))
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldLTE(FieldTags, v))
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContains(FieldTags, v))
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasPrefix(FieldTags, v))
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldHasSuffix(FieldTags, v))
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldEqualFold(FieldTags, v))
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.DownloadClients {
	return predicate.DownloadClients(sql.FieldContainsFold(FieldTags, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DownloadClients) predicate.DownloadClients {
	return predicate.DownloadClients(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DownloadClients) predicate.DownloadClients {
	return predicate.DownloadClients(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DownloadClients) predicate.DownloadClients {
	return predicate.DownloadClients(sql.NotPredicates(p))
}
